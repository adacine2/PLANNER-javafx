
    /* button image :hover GPT-3.5 */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        setButtonHoverImages(LoginButtonNext, "next");
        setButtonHoverImages(MenuButtonHome, "home");
        setButtonHoverImages(MenuButtonAdmin, "admin");
    }

    private void setButtonHoverImages(Button button, String name) {
        Image buttonImage = new Image("/icons/" + name + "_b.png");
        Image hoverImage = new Image("/icons/" + name + "_w.png");
        ImageView buttonImageView = new ImageView(buttonImage);
        button.setGraphic(buttonImageView);
        button.setOnMouseEntered(e -> buttonImageView.setImage(hoverImage));
        button.setOnMouseExited(e -> buttonImageView.setImage(buttonImage));
    }


        public void initialize(URL location, ResourceBundle resources) {
            System.out.println("Controller initialized!");
            changeButtonImageOnHover(MenuButtonHome, "home");
            changeButtonImageOnHover(LoginButtonNext, "next");
            changeButtonImageOnHover(MenuButtonAdmin, "admin_gear");
        }



    SEND EMAIL - Google API - OAuth 2.0





    private static final String APPLICATION_NAME = "My-Planner-email-API";
    private static final JsonFactory JSON_FACTORY = JacksonFactory.getDefaultInstance();
    private static final String CLIENT_SECRET_FILE = "D:/CODDING/VSE/PLANNER/src/main/resources/cz/vse/planner/utils/client_secret_990886173339-vqikosps85pkpre0a5hjk8po05jii2nk.apps.googleusercontent.com.json";
    private static final String USER_ID = "me";
    private static final String[] SCOPES = {"https://www.googleapis.com/auth/gmail.send"};
    private static final java.io.File DATA_STORE_DIR = new java.io.File(System.getProperty("user.home"), ".credentials/my-planner-email-api");


    private static Credential authorize() throws IOException, GeneralSecurityException {
        GoogleClientSecrets clientSecrets = GoogleClientSecrets.load(JSON_FACTORY, new FileReader(CLIENT_SECRET_FILE));
        FileDataStoreFactory dataStoreFactory = new FileDataStoreFactory(DATA_STORE_DIR);
        GoogleAuthorizationCodeFlow flow = new GoogleAuthorizationCodeFlow.Builder(
                GoogleNetHttpTransport.newTrustedTransport(), JSON_FACTORY, clientSecrets, Collections.singletonList(SCOPES[0]))
                .setAccessType("offline")
                .setDataStoreFactory(dataStoreFactory)
                .build();
        return new AuthorizationCodeInstalledApp(flow, new LocalServerReceiver.Builder().setPort(8080).setCallbackPath("/callback").build()).authorize(USER_ID);
    }

    private static Gmail getGmailService() throws IOException, GeneralSecurityException {
        Credential credential = authorize();
        return new Gmail.Builder(GoogleNetHttpTransport.newTrustedTransport(), JSON_FACTORY, credential)
                .setApplicationName(APPLICATION_NAME)
                .build();
    }

    private static Message createMessageWithEmail(MimeMessage emailContent) throws javax.mail.MessagingException, IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        emailContent.writeTo(buffer);
        byte[] bytes = buffer.toByteArray();
        String encodedEmail = com.google.api.client.util.Base64.encodeBase64URLSafeString(bytes);
        Message message = new Message();
        message.setRaw(encodedEmail);
        return message;
    }

    public static void sendEmail(String to, String password) {
        try {
            Gmail service = getGmailService();

            MimeMessage email = new MimeMessage(javax.mail.Session.getDefaultInstance(new Properties(), null));
            email.setFrom(new javax.mail.internet.InternetAddress("myplannerappka@gmail.com"));
            email.addRecipient(javax.mail.Message.RecipientType.TO, new javax.mail.internet.InternetAddress(to));
            email.setSubject("Your Password");
            email.setText("Your password is: " + password);

            Message message = createMessageWithEmail(email);
            service.users().messages().send(USER_ID, message).execute();
        } catch (MessagingException | IOException | GeneralSecurityException e) {
            e.printStackTrace();
        }
    }


    SMTP Google Web App password
    qevmmceddlmyupiy




/************* APPCONFIG *************/
package cz.vse.planner.main;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = {"cz.vse.planner"})
public class AppConfig {
}

/************* My_events_controller *************/
package cz.vse.planner.controls;
import cz.vse.planner.utils.*;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;

public class My_Events_Controller implements Initializable {
    @FXML
    private Button MenuButtonHome;
    @FXML
    private Button MenuButtonUser;

    @FXML
    private void handleMenuButtonHome() {
        showHomeScene();
    }

    /** IMAGE CHANGE ON HOVER
     * This part of code is used to change the image on hover
     * necesarry to import the class ChangeTheImage in utils
     * /utils/*
     * requires class to implements Initializable
     */
    private ChangeTheImage changeTheImage;
    public void initialize(URL location, ResourceBundle resources) {
        changeTheImage = new ChangeTheImage();
        changeTheImage.changeButtonImageOnHover(MenuButtonHome, "home");
        changeTheImage.changeButtonImageOnHover(MenuButtonUser, "user");
    }

    public void showHomeScene() {
        try {
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource("/cz/vse/planner/gui/home.fxml"));
            Parent root = fxmlLoader.load();

            // Get the current stage from any control (in this case, the HOME button)
            Stage primaryStage = (Stage) MenuButtonHome.getScene().getWindow();
            // Save the current dimensions of the window
            double currentWidth = primaryStage.getWidth();
            double currentHeight = primaryStage.getHeight();
            Scene homeScene = new Scene(root, currentWidth, currentHeight);

            primaryStage.setScene(homeScene);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}
